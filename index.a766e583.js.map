{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,I,EAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAQ,SAAS,aAAa,CAAC,SAG/B,EAAW,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,E,EAAI,EAAM,QAAQ,G,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,EAAE,GAAG,CAAC,SAAC,CAA1C,EAAgD,OAAA,EAAE,SAAS,CAAC,KAAK,CAAC,I,GAC9D,EAAW,MACX,EAAkB,GAEhB,EAAK,CACT,KAAM,EACN,SAAU,EACV,OAAQ,EACR,IAAK,EACL,OAAQ,CACV,CAEA,CAAA,EAAM,OAAO,CAAG,SAAC,CAAjB,EACE,IAAM,EAAS,EAAE,MAAM,CAAC,SAAS,CAEjC,OAAQ,GACN,IAAK,OACL,IAAK,WACL,IAAK,SACC,IAAoB,GAAU,AAAa,QAAb,GAChC,EAAS,IAAI,CAAC,SAAC,CAAA,CAAG,CAAlB,EAAwB,OAAA,CAAC,CAAC,CAAE,CAAC,EAAO,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAE,CAAC,EAAO,CAAC,C,GACjE,EAAkB,EAClB,EAAW,SAEX,EAAS,IAAI,CAAC,SAAC,CAAA,CAAG,CAAlB,EAAwB,OAAA,CAAC,CAAC,CAAE,CAAC,EAAO,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAE,CAAC,EAAO,CAAC,C,GACjE,EAAW,OAEb,KAEF,KAAK,MACC,IAAoB,GAAU,AAAa,QAAb,GAChC,EAAS,IAAI,CAAC,SAAC,CAAA,CAAG,CAAlB,EAAwB,OAAA,CAAC,CAAC,CAAE,CAAC,EAAO,CAAC,CAAG,CAAC,CAAC,CAAE,CAAC,EAAO,CAAC,A,GACrD,EAAkB,EAClB,EAAW,SAEX,EA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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar thead = document.querySelector(\"thead\");\nvar tbody = document.querySelector(\"tbody\");\n// table sorting by clicking on the title (in two directions)\nvar nodeList = _to_consumable_array(tbody.children).map(function(i) {\n    return i.innerText.split(\"\t\");\n});\nvar sortType = \"asc\";\nvar lastClikedTitle = \"\";\nvar th = {\n    Name: 0,\n    Position: 1,\n    Office: 2,\n    Age: 3,\n    Salary: 4\n};\nthead.onclick = function(e) {\n    var sortBy = e.target.innerText;\n    switch(sortBy){\n        case \"Name\":\n        case \"Position\":\n        case \"Office\":\n            if (lastClikedTitle !== sortBy || sortType === \"asc\") {\n                nodeList.sort(function(a, b) {\n                    return a[th[sortBy]].localeCompare(b[th[sortBy]]);\n                });\n                lastClikedTitle = sortBy;\n                sortType = \"desc\";\n            } else {\n                nodeList.sort(function(a, b) {\n                    return b[th[sortBy]].localeCompare(a[th[sortBy]]);\n                });\n                sortType = \"asc\";\n            }\n            break;\n        case \"Age\":\n            if (lastClikedTitle !== sortBy || sortType === \"asc\") {\n                nodeList.sort(function(a, b) {\n                    return a[th[sortBy]] - b[th[sortBy]];\n                });\n                lastClikedTitle = sortBy;\n                sortType = \"desc\";\n            } else {\n                nodeList.sort(function(a, b) {\n                    return b[th[sortBy]] - a[th[sortBy]];\n                });\n                sortType = \"asc\";\n            }\n            break;\n        case \"Salary\":\n            if (lastClikedTitle !== sortBy || sortType === \"asc\") {\n                nodeList.sort(function(a, b) {\n                    return a[th[sortBy]].slice(1).split(\",\").join(\"\") - b[th[sortBy]].slice(1).split(\",\").join(\"\");\n                });\n                lastClikedTitle = sortBy;\n                sortType = \"desc\";\n            } else {\n                nodeList.sort(function(a, b) {\n                    return b[th[sortBy]].slice(1).split(\",\").join(\"\") - a[th[sortBy]].slice(1).split(\",\").join(\"\");\n                });\n                sortType = \"asc\";\n            }\n    }\n    for(var i = 0; i < nodeList.length; i++){\n        // remove selected row when we sort the table\n        tbody.children[i].classList.remove(\"active\");\n        tbody.children[i].innerHTML = \"\\n        <td>\".concat(nodeList[i][0], \"</td>\\n        <td>\").concat(nodeList[i][1], \"</td>\\n        <td>\").concat(nodeList[i][2], \"</td>\\n        <td>\").concat(nodeList[i][3], \"</td>\\n        <td>\").concat(nodeList[i][4], \"</td>\\n        \");\n    }\n};\n// add active class to selected row\ntbody.onclick = function(e) {\n    var tr = e.target.parentNode;\n    for(var i = 0; i < tbody.children.length; i++)if (i === tr.sectionRowIndex) tbody.children[i].classList.add(\"active\");\n    else tbody.children[i].classList.remove(\"active\");\n};\n// add a form to the document\ndocument.body.insertAdjacentHTML(\"beforeend\", '\\n  <form class=\"new-employee-form\" novalidate>\\n    <label>Name: <input name=\"name\" type=\"text\" data-qa=\"name\" required></label>\\n    <label>Position: <input name=\"position\" type=\"text\" data-qa=\"position\" required></label>\\n    <label>Office:\\n      <select name=\"office\" data-qa=\"office\" required>\\n        <option value=\"Tokyo\">Tokyo</option>\\n        <option value=\"Singapore\">Singapore</option>\\n        <option value=\"London\">London</option>\\n        <option value=\"New York\">New York</option>\\n        <option value=\"Edinburgh\">Edinburgh</option>\\n        <option value=\"San Francisco\">San Francisco</option>\\n      </select>\\n    </label>\\n    <label>Age: <input name=\"age\" type=\"number\" data-qa=\"age\" required></label>\\n    <label>Salary: <input name=\"salary\" type=\"number\" data-qa=\"salary\" required></label>\\n    <button type=\"submit\">Save to table</button>\\n  </form>\\n  ');\nvar form = document.querySelector(\".new-employee-form\");\n// add new employee to the table\nform.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    var userName = form.elements.name.value;\n    var position = form.elements.position.value;\n    var office = form.elements.office.value;\n    var age = form.elements.age.value;\n    var salary = \"$\" + (+form.elements.salary.value).toLocaleString(\"en-US\");\n    var createNotification = function(type, msg) {\n        var notification = document.createElement(\"div\");\n        notification.className = \"notification \".concat(type);\n        document.body.append(notification);\n        var title = document.createElement(\"h3\");\n        title.className = \"title\";\n        title.textContent = \"\".concat(msg);\n        notification.append(title);\n        setTimeout(function() {\n            return notification.remove();\n        }, 3000);\n    };\n    // check if all inputs are filled\n    if (userName.length < 4) return createNotification(\"error\", \"Name has less than 4 letters\");\n    if (position.length === 0) return createNotification(\"error\", \"Position must be entered\");\n    if (age < 18) return createNotification(\"error\", \"Age is less than 18\");\n    if (age > 90) return createNotification(\"error\", \"Age is more than 90\");\n    if (form.elements.salary.value <= 0) return createNotification(\"error\", \"Salary must be entered\");\n    // insert new employee to the table\n    tbody.insertAdjacentHTML(\"beforeend\", \"\\n      <tr>\\n            <td>\".concat(userName, \"</td>\\n            <td>\").concat(position, \"</td>\\n            <td>\").concat(office, \"</td>\\n            <td>\").concat(age, \"</td>\\n            <td>\").concat(salary, \"</td>\\n      </tr>\\n      \"));\n    nodeList.push([\n        userName,\n        position,\n        office,\n        age,\n        salary\n    ]);\n    createNotification(\"success\", \"New employee is successfully added to the table\");\n    // clear all inputs after submit\n    form.elements.name.value = \"\";\n    form.elements.position.value = \"\";\n    form.elements.office.value = \"Tokyo\";\n    form.elements.age.value = \"\";\n    form.elements.salary.value = \"\";\n});\n\n//# sourceMappingURL=index.a766e583.js.map\n","'use strict';\n\nconst thead = document.querySelector('thead');\nconst tbody = document.querySelector('tbody');\n\n// table sorting by clicking on the title (in two directions)\nconst nodeList = [...tbody.children].map((i) => i.innerText.split('\\t'));\nlet sortType = 'asc';\nlet lastClikedTitle = '';\n\nconst th = {\n  Name: 0,\n  Position: 1,\n  Office: 2,\n  Age: 3,\n  Salary: 4,\n};\n\nthead.onclick = (e) => {\n  const sortBy = e.target.innerText;\n\n  switch (sortBy) {\n    case 'Name':\n    case 'Position':\n    case 'Office':\n      if (lastClikedTitle !== sortBy || sortType === 'asc') {\n        nodeList.sort((a, b) => a[th[sortBy]].localeCompare(b[th[sortBy]]));\n        lastClikedTitle = sortBy;\n        sortType = 'desc';\n      } else {\n        nodeList.sort((a, b) => b[th[sortBy]].localeCompare(a[th[sortBy]]));\n        sortType = 'asc';\n      }\n      break;\n\n    case 'Age':\n      if (lastClikedTitle !== sortBy || sortType === 'asc') {\n        nodeList.sort((a, b) => a[th[sortBy]] - b[th[sortBy]]);\n        lastClikedTitle = sortBy;\n        sortType = 'desc';\n      } else {\n        nodeList.sort((a, b) => b[th[sortBy]] - a[th[sortBy]]);\n        sortType = 'asc';\n      }\n      break;\n\n    case 'Salary':\n      if (lastClikedTitle !== sortBy || sortType === 'asc') {\n        nodeList.sort(\n          (a, b) =>\n            a[th[sortBy]].slice(1).split(',').join('') -\n            b[th[sortBy]].slice(1).split(',').join(''),\n        );\n        lastClikedTitle = sortBy;\n        sortType = 'desc';\n      } else {\n        nodeList.sort(\n          (a, b) =>\n            b[th[sortBy]].slice(1).split(',').join('') -\n            a[th[sortBy]].slice(1).split(',').join(''),\n        );\n        sortType = 'asc';\n      }\n  }\n\n  for (let i = 0; i < nodeList.length; i++) {\n    // remove selected row when we sort the table\n    tbody.children[i].classList.remove('active');\n\n    tbody.children[i].innerHTML = `\n        <td>${nodeList[i][0]}</td>\n        <td>${nodeList[i][1]}</td>\n        <td>${nodeList[i][2]}</td>\n        <td>${nodeList[i][3]}</td>\n        <td>${nodeList[i][4]}</td>\n        `;\n  }\n};\n\n// add active class to selected row\ntbody.onclick = (e) => {\n  const tr = e.target.parentNode;\n\n  for (let i = 0; i < tbody.children.length; i++) {\n    if (i === tr.sectionRowIndex) {\n      tbody.children[i].classList.add('active');\n    } else {\n      tbody.children[i].classList.remove('active');\n    }\n  }\n};\n\n// add a form to the document\ndocument.body.insertAdjacentHTML(\n  'beforeend',\n  `\n  <form class=\"new-employee-form\" novalidate>\n    <label>Name: <input name=\"name\" type=\"text\" data-qa=\"name\" required></label>\n    <label>Position: <input name=\"position\" type=\"text\" data-qa=\"position\" required></label>\n    <label>Office:\n      <select name=\"office\" data-qa=\"office\" required>\n        <option value=\"Tokyo\">Tokyo</option>\n        <option value=\"Singapore\">Singapore</option>\n        <option value=\"London\">London</option>\n        <option value=\"New York\">New York</option>\n        <option value=\"Edinburgh\">Edinburgh</option>\n        <option value=\"San Francisco\">San Francisco</option>\n      </select>\n    </label>\n    <label>Age: <input name=\"age\" type=\"number\" data-qa=\"age\" required></label>\n    <label>Salary: <input name=\"salary\" type=\"number\" data-qa=\"salary\" required></label>\n    <button type=\"submit\">Save to table</button>\n  </form>\n  `,\n);\n\nconst form = document.querySelector('.new-employee-form');\n\n// add new employee to the table\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const userName = form.elements.name.value;\n  const position = form.elements.position.value;\n  const office = form.elements.office.value;\n  const age = form.elements.age.value;\n  const salary = '$' + (+form.elements.salary.value).toLocaleString('en-US');\n\n  const createNotification = (type, msg) => {\n    const notification = document.createElement('div');\n\n    notification.className = `notification ${type}`;\n    document.body.append(notification);\n\n    const title = document.createElement('h3');\n\n    title.className = 'title';\n    title.textContent = `${msg}`;\n\n    notification.append(title);\n\n    setTimeout(() => notification.remove(), 3000);\n  };\n\n  // check if all inputs are filled\n  if (userName.length < 4) {\n    return createNotification('error', 'Name has less than 4 letters');\n  }\n\n  if (position.length === 0) {\n    return createNotification('error', 'Position must be entered');\n  }\n\n  if (age < 18) {\n    return createNotification('error', 'Age is less than 18');\n  }\n\n  if (age > 90) {\n    return createNotification('error', 'Age is more than 90');\n  }\n\n  if (form.elements.salary.value <= 0) {\n    return createNotification('error', 'Salary must be entered');\n  }\n\n  // insert new employee to the table\n  tbody.insertAdjacentHTML(\n    'beforeend',\n    `\n      <tr>\n            <td>${userName}</td>\n            <td>${position}</td>\n            <td>${office}</td>\n            <td>${age}</td>\n            <td>${salary}</td>\n      </tr>\n      `,\n  );\n\n  nodeList.push([userName, position, office, age, salary]);\n\n  createNotification(\n    'success',\n    'New employee is successfully added to the table',\n  );\n\n  // clear all inputs after submit\n  form.elements.name.value = '';\n  form.elements.position.value = '';\n  form.elements.office.value = 'Tokyo';\n  form.elements.age.value = '';\n  form.elements.salary.value = '';\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","thead","document","querySelector","tbody","nodeList","_to_consumable_array","_array_without_holes","isArray","children","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","map","innerText","split","sortType","lastClikedTitle","th","Name","Position","Office","Age","Salary","onclick","e","sortBy","target","sort","a","b","localeCompare","join","classList","remove","innerHTML","concat","tr","parentNode","sectionRowIndex","add","body","insertAdjacentHTML","form","addEventListener","preventDefault","userName","elements","value","position","office","age","salary","toLocaleString","createNotification","type","msg","notification","createElement","className","append","title","textContent","setTimeout","push"],"version":3,"file":"index.a766e583.js.map"}